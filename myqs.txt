1.create procedure that updates the quantity of a product in a specific warehouse 
	take warehouse_id and product_id as input
	increase the quantity of product 
	when quantity of the product greater than 200 increase to 2%
	when quantity of the product greater than 150 and less than 200 increase to 4%
	when quantity of the product greater than 100 and lessthan 150 increase to 5%
	when quantity of the product greater than 50 and lessthan 100 increase to 7%
	when quantity of the product lessthan than 50 increase to 10%
After a successful update, the procedure should display a message in the format: "<Prodcut Name> is updated with a qauntity of $<500>".
-------------------------------------------------------------------------------------------
2.create a procedure to calculate count of products and thier quantity present in a 
warehouse by passing warehouse_id as input
	the output should be displayed as 'product_name-warehouse_name-tot_qauntity'


3.write an sql query to get product names that belong to the 
category with the highest number of products.

4.write an sql query to retrieve the count of employees who have not placed any sales in the year 2015 to 2017.

5.



### **1. SELECT Statements**

**Basic:**

1. Retrieve all columns from the `PRODUCTS` table.
2. Display only `FIRST_NAME` and `LAST_NAME` from the `EMPLOYEES` table.
3. Get all customers with a credit limit greater than 10000.
4. Fetch all orders placed after '01-JAN-2024'.
5. Show a list of product names in uppercase.

**Intermediate:**
6\. Show total number of products in each category.
7\. Display the maximum, minimum, and average `LIST_PRICE` of products.
8\. List customers who haven’t placed any orders.
9\. Find all employees who joined in the last 6 months.
10\. Show orders with order value greater than 1000 (assume order value = SUM of quantity × unit\_price).

---

### **2. Analytic Functions**

**Basic:**

1. Use `ROWNUM` to select the top 10 products by price.
2. Use `RANK()` to rank employees based on their `HIRE_DATE`.
3. Use `DENSE_RANK()` to rank products by `LIST_PRICE`.
4. Use `LAG()` to find the previous `LIST_PRICE` of a product in the same category.
5. Show each order and a running total of its item amounts per customer.

**Intermediate:**
6\. Use `LEAD()` to find the next product's name and price within the same category.
7\. Partition employees by job title and rank them by hire date.
8\. Calculate cumulative quantity ordered per product using `SUM() OVER()`.
9\. Use `NTILE(4)` to divide employees into performance quartiles (assume a rating field).
10\. Use analytic functions to compute the difference between a product’s list price and category average.

---

### **3. Joins**

**Basic:**

1. List orders with their associated customer names.
2. Display product names along with category names.
3. Show employee names along with their manager’s name.
4. List warehouses with their location addresses.
5. Show products with their inventory quantities at each warehouse.

**Intermediate:**
6\. Find all customers who have placed more than 2 orders using `GROUP BY` and `JOIN`.
7\. List contacts and their corresponding customer’s website.
8\. Retrieve employees who have not placed any sales (no matching records in `ORDERS`).
9\. Join `ORDERS`, `ORDER_ITEMS`, and `PRODUCTS` to show complete order details.
10\. Display warehouse names and their city and country using multi-level joins.

---

### **4. Subqueries**

**Basic:**

1. Find customers whose credit limit is above the average credit limit.
2. Get product names that belong to the category with the highest number of products.
3. Find orders where the total quantity ordered exceeds 100.
4. Show employees whose salary is higher than their manager’s.
5. List products that were never sold (use `NOT IN` or `NOT EXISTS`).

**Intermediate:**
6\. Get the second highest `LIST_PRICE` using a subquery.
7\. Display names of employees who are managers (exist in `MANAGER_ID`).
8\. List customers who placed an order in the last 7 days using a correlated subquery.
9\. Find products whose price is above the average price in their category (correlated subquery).
10\. Get the customer(s) who placed the highest number of orders.

---

## **PL/SQL**

### **1. Procedures**

**Basic:**

1. Write a procedure to print a welcome message.
2. Create a procedure to increase a customer's credit limit by a fixed value.
3. Write a procedure to display product details by product ID.
4. Build a procedure to update the list price of a product.
5. Write a procedure that deletes a product from the inventory by ID.

**Intermediate:**
6\. Create a procedure that inserts a new employee and validates email uniqueness.
7\. Develop a procedure to calculate total sales for a given order.
8\. Write a procedure to generate a report of employees grouped by job title.
9\. Create a procedure to raise salary by 10% for employees in a specific department.
10\. Develop a procedure to archive orders older than 1 year into a history table.

---

### **2. Functions**

**Basic:**

1. Write a function that returns the full name of an employee given their ID.
2. Create a function to return the total number of products in inventory.
3. Write a function that calculates the discount (10%) on a given list price.
4. Build a function that returns the current date and time.
5. Write a function to return whether a product is available (`Y`/`N` based on inventory quantity).

**Intermediate:**
6\. Create a function that returns the average order value for a customer.
7\. Write a function to return the number of employees under a specific manager.
8\. Develop a function to return the top-performing salesman by total sales.
9\. Create a function to get the reorder quantity based on current inventory.
10\. Write a function that accepts an order ID and returns the order’s total amount.

---

### **3. Triggers**

**Basic:**

1. Write a trigger to prevent deletion from `PRODUCTS` if the product is still in inventory.
2. Create a trigger to update `LAST_UPDATED` column on update in `PRODUCTS`.
3. Develop a trigger to log inserts into `ORDERS` table.
4. Write a trigger to capitalize customer names on insert.
5. Create a trigger to ensure credit limit is never negative.

**Intermediate:**
6\. Write an AFTER INSERT trigger that logs order creation with timestamp and user ID.
7\. Create a BEFORE UPDATE trigger to validate that `LIST_PRICE` is always higher than `STANDARD_COST`.
8\. Develop a trigger to auto-assign a default warehouse if none is provided on product insert.
9\. Write a trigger to prevent updates to employee data on weekends.
10\. Build a trigger that calculates and stores order totals in a separate summary table.

---

Let me know if you want solutions, a practice database, or hands-on exercises for these questions.



Analyse this schema diagram 

give intermediate questions 
on
Select statements 
analytic functions 
sub queries 
joins
of oracle SQL


and for PLSQL
procedures
functions 
triggers 

give 5 questions on each concept to. enhance my knowledge on this concepts

Here are intermediate-level questions for each concept, based on the provided schema and Oracle SQL/PLSQL best practices. These questions will help deepen your understanding and practical skills.

## SQL Concepts

**Select Statements**

1. Write a query to display the names and credit limits of all customers whose credit limit is above 10,000.
2. Retrieve the product names and their corresponding category names using a single SELECT statement.
3. List all orders placed in the last 30 days, showing order ID, customer name, and order date.
4. Find the total quantity and total price for each order in the ORDER_ITEMS table.
5. Display the names of all employees who do not have a manager (i.e., top-level employees).

**Analytic Functions**

1. For each order, show the order ID, customer ID, and the running total of quantity ordered (use SUM as an analytic function).
2. Display the list price of each product along with the average list price of all products (using AVG as an analytic function).
3. For each employee, show their name and the rank of their hire date within their department (using RANK() or DENSE_RANK()).
4. List all products, showing their price and the difference between their price and the average price in their category (use PARTITION BY).
5. Show each order item with its unit price and the maximum unit price for that order (use MAX() OVER...).

**Subqueries**

1. Find the names of customers who have placed at least one order.
2. List the products that have never been ordered (using a NOT EXISTS subquery).
3. Display the names of employees who have the same job title as at least one other employee.
4. Show the warehouses that do not store any products.
5. Retrieve the names of customers who have placed orders with a salesman whose job title is 'Sales Representative'.

**Joins**

1. Write a query to display all order IDs along with the customer name and salesman name for each order.
2. List all products with their category names and the quantity available in each warehouse.
3. Show all employees along with the names of their managers.
4. Display the address and country name for each warehouse.
5. Retrieve all orders, including orders that do not have any order items (use an outer join).

## PL/SQL Concepts

**Procedures**

1. Write a procedure that increases the credit limit of a customer by a given amount.
2. Create a procedure to add a new product to the PRODUCTS table.
3. Develop a procedure that deletes all orders older than a specified date.
4. Write a procedure that updates the quantity of a product in a specific warehouse.
5. Create a procedure to assign a manager to an employee.

**Functions**

1. Write a function that returns the total number of orders for a given customer.
2. Create a function that calculates and returns the total value of an order (sum of quantity * unit price for all items in the order).
3. Develop a function to get the full name (first and last name) of an employee given their employee ID.
4. Write a function that returns the average price of products in a given category.
5. Create a function that checks if a product is available in any warehouse (returns TRUE/FALSE).

**Triggers**

1. Write a trigger that automatically updates the standard cost of a product in the PRODUCTS table whenever its list price is updated.
2. Create a trigger to log every deletion in the ORDERS table into an audit table.
3. Develop a trigger that prevents the deletion of a warehouse if there are still products stored in it.
4. Write a trigger to update the last modified date for a customer whenever their information is updated.
5. Create a trigger that ensures the credit limit of a customer cannot be set below zero.
